{"version":3,"file":"assets/js/af9e5d51.bf98a7b7.js","mappings":"kPAEO,MAAMA,EAAc,CAAC,EACfC,EAAe,0BACfC,EAAW,CACtB,cAAiB,oCACjB,GAAM,oCACN,MAAS,0BACT,YAAe,iTACf,OAAU,kDACV,cAAiB,oBACjB,KAAQ,qCACR,UAAa,wCACb,OAAS,EACT,UAAY,EACZ,QAAW,mHACX,KAAQ,GACR,QAAW,UACX,cAAiB,SACjB,cAAiB,WACjB,uBAA0B,gBAC1B,YAAe,CAAC,EAChB,QAAW,mBACX,SAAY,CACV,MAAS,UACT,UAAa,0BAEf,KAAQ,CACN,MAAS,iBACT,UAAa,yCAGJC,EAAS,CAEtB,EAKaC,EAAM,GACnB,SAASC,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,EAAG,MACF,UAAsBN,EAAMO,aAAa,oBAACC,EAAmB,uBAAEC,EAAsB,mBAAEC,GAAsBT,EAIhH,OAHKS,GAAoBC,EAAqB,sBAAsB,GAC/DH,GAAqBG,EAAqB,uBAAuB,GACjEF,GAAwBE,EAAqB,0BAA0B,IACrE,UAAM,WAAW,CACtBC,SAAU,EAAC,SAAKX,EAAYG,GAAI,CAC9BS,GAAI,0BACJD,SAAU,4BACR,MAAM,SAAKJ,EAAqB,CAAC,GAAI,MAAM,UAAMP,EAAYI,EAAG,CAClEO,SAAU,CAAC,iLAAiL,SAAKX,EAAYK,EAAG,CAC9MQ,KAAM,2FACNF,SAAU,eACR,6HACF,MAAM,SAAKH,EAAwB,CAAC,GAAI,MAAM,SAAKC,EAAoB,CAAC,KAEhF,CAOA,QANA,SAAoBV,EAAQ,CAAC,GAC3B,MAAOe,QAASC,GAAad,OAAOC,OAAO,CAAC,GAAG,UAAsBH,EAAMO,YAC3E,OAAOS,GAAY,SAAKA,EAAWd,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1DY,UAAU,SAAKb,EAAmBC,MAC9BD,EAAkBC,EAC1B,EAEA,SAASW,EAAqBE,EAAII,GAChC,MAAM,IAAIC,MAAM,aAAeD,EAAY,YAAc,UAAY,KAAOJ,EAAK,qEACnF,C,0DCrCO,MAAMM,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBb,GAC/B,MAAMc,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfZ,EACFA,EAAWc,GAGb,IAAIA,KAAsBd,IAChC,CAACc,EAAmBd,GACzB,CAGA,MAAMe,EAAc,CAAC,EAQd,SAASC,GAAY,WAAChB,EAAU,SAAEK,EAAQ,qBAAEY,IAEjD,IAAIC,EAWJ,OAREA,EADED,EAEsB,mBAAfjB,EACHA,EAAW,CAAC,GACZA,GAAce,EAEJF,EAAiBb,GAG5B,gBACLY,EAAWO,SACX,CAACC,MAAOF,GACRb,EAEJ,C","sources":["webpack://interslavic-fun/./docs/resources/applets/intelligibility.md","webpack://interslavic-fun/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["\n\nexport const frontMatter = {};\nexport const contentTitle = 'Intelligibility Builder';\nexport const metadata = {\n  \"unversionedId\": \"resources/applets/intelligibility\",\n  \"id\": \"resources/applets/intelligibility\",\n  \"title\": \"Intelligibility Builder\",\n  \"description\": \"Construct a special notation to indicate the intelligibility of a given form in the Slavic languages. Drag and drop a synset XML file to the table below to get started (see an example). After you finish with the table, hover over the code and click the \\\"Copy\\\" button to copy the code to your clipboard.\",\n  \"source\": \"@site/docs/resources/applets/intelligibility.md\",\n  \"sourceDirName\": \"resources/applets\",\n  \"slug\": \"/resources/applets/intelligibility\",\n  \"permalink\": \"/bs/resources/applets/intelligibility\",\n  \"draft\": false,\n  \"unlisted\": false,\n  \"editUrl\": \"https://github.com/medzuslovjansky/medzuslovjansky.github.io/edit/main/docs/resources/applets/intelligibility.md\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"lastUpdatedBy\": \"kuroya\",\n  \"lastUpdatedAt\": 1713949206,\n  \"formattedLastUpdatedAt\": \"24. apr 2024.\",\n  \"frontMatter\": {},\n  \"sidebar\": \"resourcesSidebar\",\n  \"previous\": {\n    \"title\": \"Applets\",\n    \"permalink\": \"/bs/resources/applets/\"\n  },\n  \"next\": {\n    \"title\": \"Transliterator\",\n    \"permalink\": \"/bs/resources/applets/transliterator\"\n  }\n};\nexport const assets = {\n\n};\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nexport const toc = [];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    a: \"a\"\n  }, _provideComponents(), props.components), {CustomBeforeSection, IntelligibilityBuilder, CustomAfterSection} = _components;\n  if (!CustomAfterSection) _missingMdxReference(\"CustomAfterSection\", true);\n  if (!CustomBeforeSection) _missingMdxReference(\"CustomBeforeSection\", true);\n  if (!IntelligibilityBuilder) _missingMdxReference(\"IntelligibilityBuilder\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"intelligibility-builder\",\n      children: \"Intelligibility Builder\"\n    }), \"\\n\", _jsx(CustomBeforeSection, {}), \"\\n\", _jsxs(_components.p, {\n      children: [\"Construct a special notation to indicate the intelligibility of a given form in the Slavic languages. Drag and drop a synset XML file to the table below to get started (see \", _jsx(_components.a, {\n        href: \"https://raw.githubusercontent.com/medzuslovjansky/database/beta/synsets/00/00/01/oko.xml\",\n        children: \"an example\"\n      }), \"). After you finish with the table, hover over the code and click the \\\"Copy\\\" button to copy the code to your clipboard.\"]\n    }), \"\\n\", _jsx(IntelligibilityBuilder, {}), \"\\n\", _jsx(CustomAfterSection, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["frontMatter","contentTitle","metadata","assets","toc","_createMdxContent","props","_components","Object","assign","h1","p","a","components","CustomBeforeSection","IntelligibilityBuilder","CustomAfterSection","_missingMdxReference","children","id","href","wrapper","MDXLayout","component","Error","MDXContext","useMDXComponents","contextComponents","emptyObject","MDXProvider","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}