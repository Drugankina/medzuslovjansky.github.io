{"version":3,"file":"assets/js/1e08adb1.d003d022.js","mappings":"mPAEO,MAAMA,EAAc,CAC1BC,QAAS,CACR,WACA,QAGWC,EAAe,yHACfC,EAAW,CACtB,UAAa,+CACb,QAAW,qHACX,OAAU,oDACV,MAAS,yHACT,YAAe,+DACf,KAAQ,2BACR,KAAQ,GACR,YAAe,MACf,mBAAqB,EACrB,QAAW,CACT,CACE,KAAQ,yBACR,IAAO,8BACP,SAAY,kCACZ,IAAO,YAET,CACE,KAAQ,sBACR,IAAO,wBACP,SAAY,uJACZ,IAAO,QAGX,YAAe,CACb,QAAW,CACT,WACA,QAGJ,UAAY,EACZ,SAAY,CACV,MAAS,8CACT,UAAa,4CAGJC,EAAS,CACtB,iBAAoB,MAACC,OAAWA,IAKnBC,EAAM,CAAC,CAClB,MAAS,+DACT,GAAM,+DACN,MAAS,IAEX,SAASC,EAAkBC,GACzB,MAAMC,EAAc,CAClBC,KAAM,OACNC,GAAI,KACJC,EAAG,QACA,aACAJ,EAAMK,YAEX,OAAO,UAAM,WAAW,CACtBC,SAAU,EAAC,SAAKL,EAAYE,GAAI,CAC9BI,GAAI,+DACJD,SAAU,iEACR,MAAM,UAAML,EAAYG,EAAG,CAC7BE,SAAU,CAAC,0lCAA2N,SAAKL,EAAYC,KAAM,CAC3PI,SAAU,cACR,8sEACF,MAAM,UAAML,EAAYG,EAAG,CAC7BE,SAAU,CAAC,mlBAAmH,SAAKL,EAAYC,KAAM,CACnJI,SAAU,OACR,YAAO,SAAKL,EAAYC,KAAM,CAChCI,SAAU,OACR,uPAGV,CACe,SAASE,EAAWR,EAAQ,CAAC,GAC1C,MAAOS,QAASC,GAAa,KACxB,aACAV,EAAMK,YAEX,OAAOK,GAAY,SAAKA,EAAW,IAC9BV,EACHM,UAAU,SAAKP,EAAmB,IAC7BC,MAEFD,EAAkBC,EACzB,C,0DC3DO,MAAMW,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBP,GAC/B,MAAMQ,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfN,EACFA,EAAWQ,GAGb,IAAIA,KAAsBR,IAChC,CAACQ,EAAmBR,GACzB,CAGA,MAAMS,EAAc,CAAC,EAQd,SAASC,GAAY,WAACV,EAAU,SAAEC,EAAQ,qBAAEU,IAEjD,IAAIC,EAWJ,OAREA,EADED,EAEsB,mBAAfX,EACHA,EAAW,CAAC,GACZA,GAAcS,EAEJF,EAAiBP,GAG5B,gBACLM,EAAWO,SACX,CAACC,MAAOF,GACRX,EAEJ,C","sources":["webpack://interslavic-fun/./articles/2024-07-09-diskusija-lj-nj-cyrl.md?a8c6","webpack://interslavic-fun/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["\n\nexport const frontMatter = {\n\tauthors: [\n\t\t'noomorph',\n\t\t'jvs'\n\t]\n};\nexport const contentTitle = 'Асиметрија меджу LJ/NJ и Љ/Њ';\nexport const metadata = {\n  \"permalink\": \"/sl/articles/2024/07/09/diskusija-lj-nj-cyrl\",\n  \"editUrl\": \"https://github.com/medzuslovjansky/medzuslovjansky.github.io/edit/main/articles/2024-07-09-diskusija-lj-nj-cyrl.md\",\n  \"source\": \"@site/articles/2024-07-09-diskusija-lj-nj-cyrl.md\",\n  \"title\": \"Асиметрија меджу LJ/NJ и Љ/Њ\",\n  \"description\": \"Мотивација\",\n  \"date\": \"2024-07-09T00:00:00.000Z\",\n  \"tags\": [],\n  \"readingTime\": 6.925,\n  \"hasTruncateMarker\": true,\n  \"authors\": [\n    {\n      \"name\": \"Jaroslav Sergějev\",\n      \"url\": \"https://github.com/noomorph\",\n      \"imageURL\": \"https://github.com/noomorph.png\",\n      \"key\": \"noomorph\"\n    },\n    {\n      \"name\": \"Jan van Steenbergen\",\n      \"url\": \"https://steen.free.fr\",\n      \"imageURL\": \"https://upload.wikimedia.org/wikipedia/commons/5/54/Nieuwjaarsbijeenkomst_Wikimedia_Nederland_21_januari_2017_Museum_Volkenkunde_Leiden_%2827%29.jpg\",\n      \"key\": \"jvs\"\n    }\n  ],\n  \"frontMatter\": {\n    \"authors\": [\n      \"noomorph\",\n      \"jvs\"\n    ]\n  },\n  \"unlisted\": false,\n  \"nextItem\": {\n    \"title\": \"Asimetrija medžu LJ/NJ i Љ/Њ\",\n    \"permalink\": \"/sl/articles/2024/07/09/diskusija-lj-nj\"\n  }\n};\nexport const assets = {\n\"authorsImageUrls\": [undefined, undefined],\n};\n\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nexport const toc = [{\n  \"value\": \"Мотивација\",\n  \"id\": \"мотивација\",\n  \"level\": 2\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    h2: \"h2\",\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      id: \"мотивација\",\n      children: \"Мотивација\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Уж нєколико седмиц Јан ван Стеенберген јест много зајеты с прєводжењем вики-интерфејса, да быхмо могли потом спокојно почети работу над МС Википедијеју. То јест спєшно дєло, ибо кратко послє публикације нашего кода \", _jsx(_components.code, {\n        children: \"ISO 639-3\"\n      }), \" уже појавило се прєдложење за МС Википедију МС пројект в Инкубатору. Не хочемо, абы људи почели копијовати тексты из Меджувики, что јест нарушење авторскых прав. Вмєсто того, трєба буде копирати цєло содржање Меджувики в Инкубатор – заједно с хисторијеју. В Меджувики јест автоматичны транслитератор, да бы читатељи могли избирати меджу латиницеју и кирилицеју. Очевидно, в Википедији он такоже буде потрєбны. Ту јест једин малы проблем.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Тутдењ меджусловјанскы правопис имаје асиметрију меджу латиницеју и кирилицеју, что се тыче прєдавања диграфов \", _jsx(_components.code, {\n        children: \"lj\"\n      }), \" и \", _jsx(_components.code, {\n        children: \"nj\"\n      }), \" на писму, и то јест објект нашеј дискусије ниже.\"]\n    })]\n  });\n}\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["frontMatter","authors","contentTitle","metadata","assets","undefined","toc","_createMdxContent","props","_components","code","h2","p","components","children","id","MDXContent","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents","emptyObject","MDXProvider","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}